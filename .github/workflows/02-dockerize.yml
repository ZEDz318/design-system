name: Dockerize PR

on:
  pull_request:
    branches:
      - main


jobs:
  dockerize:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2
        
      
      - name: Extract number of pull request
        id: pull_request
        run: |
          echo ::set-output name=number::$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        
      - name: Prints number of pull request
        run: echo Pull request branch is '${{ steps.pull_request.number }}'

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Dockerize PR"
          description: "PR: ${{ steps.pull_request.number }}"
          color: 0xffed2b
          username: GitHub Actions
          
#      - name: Git Identity
#        run: |
#          git config --global user.name 'geovbot'
#          git config --global user.email 'github.bot@geovistory.org'
#          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          
#      - name: Install Lerna globally
#        run: npm install lerna --location=global
#      
#      - uses: actions/setup-node@v2
#        with:
#          node-version: '16.13.2'
#          registry-url: 'https://registry.npmjs.org'
#
#      - name: Clean install dependencies
#        run: npm ci
#
#      - name: Build
#        run: npm run build
#      
#      - uses: EndBug/add-and-commit@v5
#        with:
#          message: 'chore(): update build artifacts'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Show lerna.json 
#        run: cat lerna.json
#        
#      - name: Tag this commit with pr 
#        id: lerna
#        run: |
#          lerna version prepatch --preid issue-${{GITHUB_BASE_REF}} --yes
#          echo ::set-output name=tag::$(cd ./packages/design-system-web && cat package.json | jq -r '.version')
#        env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     
#      - name: Echo tag created by lerna
#        run: echo your branch is '${{steps.lerna.outputs.tag}}'
#     
#      - name: Update Lock files
#        run: 'npm run update:lock'
#
#      - uses: EndBug/add-and-commit@v5
#        with:
#          message: 'chore(): update lock files'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Docker Build & Push
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ghcr.io/geovistory/design-system:${{steps.lerna.outputs.tag}}
#                  
#      - name: Send Discord Notification
#        uses: sarisia/actions-status-discord@v1
#        if: always()
#        with:
#          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
#          title: "Dockerize PR > Done"
#          description: "Image Tag: ${{steps.lerna.outputs.tag}}"
#          color: 0x0000ff
#          username: GitHub Actions
#
