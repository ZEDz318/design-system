export const s04_1 = `Need to install the following packages:
create-next-app@12.3.1
Ok to proceed? (y) y
✔ What is your project named? … stencil-next-hydrate-example`;


export const s04_2=`/// <reference path="../node_modules/@geovistory/design-system-web/dist/types/react.d.ts" />
import '../styles/globals.css'
import type { AppProps } from 'next/app'
import { defineCustomElements } from '@geovistory/design-system-web/loader';

// Here we define the web components (custom elements)
defineCustomElements();

function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}

export default MyApp
`

export const s04_3=`...
<main>
  <ion-card>
    <ion-card-header>
      <ion-card-subtitle>Class of entity i315800</ion-card-subtitle>
      <ion-card-title>
        <geov-entity-class-label
          sparql-endpoint="https://sparql.geovistory.org/api_v1_community_data"
          entity-id="i315800"
        ></geov-entity-class-label>
      </ion-card-title>
    </ion-card-header>
  </ion-card>
</main>
...`

export const s04_4=`import { renderToString } from '@geovistory/design-system-web/hydrate';
import type { JSXElementConstructor, ReactElement } from 'react';
import ReactDOMServer from 'react-dom/server';
import { Window } from 'happy-dom';
export async function serverRender(
  element: ReactElement<any, string | JSXElementConstructor<any>>
) {
  const html = ReactDOMServer.renderToString(element);
  let serverFetchedData: any;
  const stencilHydrateOutput = await renderToString(html, {
    removeHtmlComments: true,
    beforeHydrate: (doc) => {
      doc.__STENCIL_DATA__ = {};
    },
    afterHydrate: (doc) => {
      serverFetchedData = doc.__STENCIL_DATA__;
    },
  });

  const happyDomWindow = new Window();
  const happyDomDoc = happyDomWindow.document;
  happyDomDoc.write(stencilHydrateOutput.html);
  const bodyInnerHtml = happyDomDoc.querySelector('body').getInnerHTML();
  const headInnerHtml = happyDomDoc.querySelector('head').getInnerHTML();
  return { bodyInnerHtml: bodyInnerHtml, headInnerHtml, serverFetchedData };
}`


export const s04_5=`import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { serverRender } from '../lib/serverRender';
import styles from '../styles/Home.module.css';

interface HomeProps {
  _ssrHtmlBody: string;
  _ssrHtmlHead: string;
}

const Home: NextPage<HomeProps> = (props) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        className={styles.main}
        dangerouslySetInnerHTML={{ __html: props._ssrHtmlBody }}
      ></main>
    </div>
  );
};

const ssr = () => (
  <ion-card>
    <ion-card-header>
      <ion-card-subtitle>Class of entity i315800</ion-card-subtitle>
      <ion-card-title>
        <geov-entity-class-label
          sparql-endpoint="https://sparql.geovistory.org/api_v1_community_data"
          entity-id="i315800"
        ></geov-entity-class-label>
      </ion-card-title>
    </ion-card-header>
  </ion-card>
);

export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  const res = await serverRender(ssr());

  return {
    props: {
      _ssrHtmlBody: res.bodyInnerHtml,
      _ssrHtmlHead: res.headInnerHtml,
    },
    revalidate: 10,
  };
};

export default Home;
`
