/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GeovClassSelectItem } from "./components/geov-class-select/geov-class-select";
import { GeovClassRadioGroupEvent } from "./components/geov-class-radio-group/geov-class-radio-group";
import { ClassSelectEvent, GeovClassSelectItem as GeovClassSelectItem1 } from "./components/geov-class-select/geov-class-select";
import { GeovClassSelectPopupEvent } from "./components/geov-class-select-popup/geov-class-select-popup";
import { Languages } from "./components/geov-code/geov-code";
import { GeovDataFetchExampleData } from "./components/geov-data-fetch-example/geov-data-fetch-example";
import { SparqlBinding } from "./lib/sparqlJson";
import { GeovEntityLabelData } from "./components/geov-entity-label/geov-entity-label";
import { GeovEntityListItem } from "./components/geov-entity-list/geov-entity-list";
import { PageEvent } from "./components/geov-paginator/geov-paginator";
export namespace Components {
    interface GeovCarousel {
        /**
          * array of image URLs passed to src attribute of the <img src="">
         */
        "images": string[];
    }
    interface GeovClassRadioGroup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
    }
    interface GeovClassSelect {
        /**
          * If true, the classes are checked on init, else none is checked on init
         */
        "checkedOnInit": boolean;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
    }
    interface GeovClassSelectPopup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
    }
    interface GeovCode {
        "code": string;
        "copyButton": boolean;
        "language": Languages;
    }
    interface GeovDataFetchExample {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * Do the sparql request(s)
          * @returns a Promise with the data for this component
         */
        "fetchData": () => Promise<GeovDataFetchExampleData>;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityClassLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityDefinition {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * Do the sparql request(s)
          * @returns a Promise with the data for this component
         */
        "fetchData": () => Promise<GeovEntityLabelData>;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityList {
        "defaultPageSize": number;
        "items"?: GeovEntityListItem[];
        "loading"?: boolean;
    }
    interface GeovExplorer {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * If true, the component will not render before the initial data is fetched
         */
        "fetchBeforeRender": boolean;
        /**
          * initialize the component with a given search string
         */
        "initSearchString"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovPaginator {
        "hidePageSize": boolean;
        "length": number;
        "pageIndex": number;
        "pageSize": number;
        "showFirstLastButtons": boolean;
    }
    interface GeovToc {
        "indentPx": number;
    }
}
export interface GeovClassRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassRadioGroupElement;
}
export interface GeovClassSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassSelectElement;
}
export interface GeovClassSelectPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassSelectPopupElement;
}
export interface GeovPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovPaginatorElement;
}
declare global {
    interface HTMLGeovCarouselElement extends Components.GeovCarousel, HTMLStencilElement {
    }
    var HTMLGeovCarouselElement: {
        prototype: HTMLGeovCarouselElement;
        new (): HTMLGeovCarouselElement;
    };
    interface HTMLGeovClassRadioGroupElement extends Components.GeovClassRadioGroup, HTMLStencilElement {
    }
    var HTMLGeovClassRadioGroupElement: {
        prototype: HTMLGeovClassRadioGroupElement;
        new (): HTMLGeovClassRadioGroupElement;
    };
    interface HTMLGeovClassSelectElement extends Components.GeovClassSelect, HTMLStencilElement {
    }
    var HTMLGeovClassSelectElement: {
        prototype: HTMLGeovClassSelectElement;
        new (): HTMLGeovClassSelectElement;
    };
    interface HTMLGeovClassSelectPopupElement extends Components.GeovClassSelectPopup, HTMLStencilElement {
    }
    var HTMLGeovClassSelectPopupElement: {
        prototype: HTMLGeovClassSelectPopupElement;
        new (): HTMLGeovClassSelectPopupElement;
    };
    interface HTMLGeovCodeElement extends Components.GeovCode, HTMLStencilElement {
    }
    var HTMLGeovCodeElement: {
        prototype: HTMLGeovCodeElement;
        new (): HTMLGeovCodeElement;
    };
    interface HTMLGeovDataFetchExampleElement extends Components.GeovDataFetchExample, HTMLStencilElement {
    }
    var HTMLGeovDataFetchExampleElement: {
        prototype: HTMLGeovDataFetchExampleElement;
        new (): HTMLGeovDataFetchExampleElement;
    };
    interface HTMLGeovEntityClassLabelElement extends Components.GeovEntityClassLabel, HTMLStencilElement {
    }
    var HTMLGeovEntityClassLabelElement: {
        prototype: HTMLGeovEntityClassLabelElement;
        new (): HTMLGeovEntityClassLabelElement;
    };
    interface HTMLGeovEntityDefinitionElement extends Components.GeovEntityDefinition, HTMLStencilElement {
    }
    var HTMLGeovEntityDefinitionElement: {
        prototype: HTMLGeovEntityDefinitionElement;
        new (): HTMLGeovEntityDefinitionElement;
    };
    interface HTMLGeovEntityLabelElement extends Components.GeovEntityLabel, HTMLStencilElement {
    }
    var HTMLGeovEntityLabelElement: {
        prototype: HTMLGeovEntityLabelElement;
        new (): HTMLGeovEntityLabelElement;
    };
    interface HTMLGeovEntityListElement extends Components.GeovEntityList, HTMLStencilElement {
    }
    var HTMLGeovEntityListElement: {
        prototype: HTMLGeovEntityListElement;
        new (): HTMLGeovEntityListElement;
    };
    interface HTMLGeovExplorerElement extends Components.GeovExplorer, HTMLStencilElement {
    }
    var HTMLGeovExplorerElement: {
        prototype: HTMLGeovExplorerElement;
        new (): HTMLGeovExplorerElement;
    };
    interface HTMLGeovPaginatorElement extends Components.GeovPaginator, HTMLStencilElement {
    }
    var HTMLGeovPaginatorElement: {
        prototype: HTMLGeovPaginatorElement;
        new (): HTMLGeovPaginatorElement;
    };
    interface HTMLGeovTocElement extends Components.GeovToc, HTMLStencilElement {
    }
    var HTMLGeovTocElement: {
        prototype: HTMLGeovTocElement;
        new (): HTMLGeovTocElement;
    };
    interface HTMLElementTagNameMap {
        "geov-carousel": HTMLGeovCarouselElement;
        "geov-class-radio-group": HTMLGeovClassRadioGroupElement;
        "geov-class-select": HTMLGeovClassSelectElement;
        "geov-class-select-popup": HTMLGeovClassSelectPopupElement;
        "geov-code": HTMLGeovCodeElement;
        "geov-data-fetch-example": HTMLGeovDataFetchExampleElement;
        "geov-entity-class-label": HTMLGeovEntityClassLabelElement;
        "geov-entity-definition": HTMLGeovEntityDefinitionElement;
        "geov-entity-label": HTMLGeovEntityLabelElement;
        "geov-entity-list": HTMLGeovEntityListElement;
        "geov-explorer": HTMLGeovExplorerElement;
        "geov-paginator": HTMLGeovPaginatorElement;
        "geov-toc": HTMLGeovTocElement;
    }
}
declare namespace LocalJSX {
    interface GeovCarousel {
        /**
          * array of image URLs passed to src attribute of the <img src="">
         */
        "images"?: string[];
    }
    interface GeovClassRadioGroup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
        "onSelectionChanged"?: (event: GeovClassRadioGroupCustomEvent<GeovClassRadioGroupEvent>) => void;
    }
    interface GeovClassSelect {
        /**
          * If true, the classes are checked on init, else none is checked on init
         */
        "checkedOnInit"?: boolean;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
        "onSelectionChanged"?: (event: GeovClassSelectCustomEvent<ClassSelectEvent>) => void;
    }
    interface GeovClassSelectPopup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "onSelectionChanged"?: (event: GeovClassSelectPopupCustomEvent<GeovClassSelectPopupEvent>) => void;
    }
    interface GeovCode {
        "code"?: string;
        "copyButton"?: boolean;
        "language"?: Languages;
    }
    interface GeovDataFetchExample {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityClassLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityDefinition {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityList {
        "defaultPageSize"?: number;
        "items"?: GeovEntityListItem[];
        "loading"?: boolean;
    }
    interface GeovExplorer {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * If true, the component will not render before the initial data is fetched
         */
        "fetchBeforeRender"?: boolean;
        /**
          * initialize the component with a given search string
         */
        "initSearchString"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovPaginator {
        "hidePageSize"?: boolean;
        "length"?: number;
        "onPageChanged"?: (event: GeovPaginatorCustomEvent<PageEvent>) => void;
        "pageIndex"?: number;
        "pageSize"?: number;
        "showFirstLastButtons"?: boolean;
    }
    interface GeovToc {
        "indentPx"?: number;
    }
    interface IntrinsicElements {
        "geov-carousel": GeovCarousel;
        "geov-class-radio-group": GeovClassRadioGroup;
        "geov-class-select": GeovClassSelect;
        "geov-class-select-popup": GeovClassSelectPopup;
        "geov-code": GeovCode;
        "geov-data-fetch-example": GeovDataFetchExample;
        "geov-entity-class-label": GeovEntityClassLabel;
        "geov-entity-definition": GeovEntityDefinition;
        "geov-entity-label": GeovEntityLabel;
        "geov-entity-list": GeovEntityList;
        "geov-explorer": GeovExplorer;
        "geov-paginator": GeovPaginator;
        "geov-toc": GeovToc;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "geov-carousel": LocalJSX.GeovCarousel & JSXBase.HTMLAttributes<HTMLGeovCarouselElement>;
            "geov-class-radio-group": LocalJSX.GeovClassRadioGroup & JSXBase.HTMLAttributes<HTMLGeovClassRadioGroupElement>;
            "geov-class-select": LocalJSX.GeovClassSelect & JSXBase.HTMLAttributes<HTMLGeovClassSelectElement>;
            "geov-class-select-popup": LocalJSX.GeovClassSelectPopup & JSXBase.HTMLAttributes<HTMLGeovClassSelectPopupElement>;
            "geov-code": LocalJSX.GeovCode & JSXBase.HTMLAttributes<HTMLGeovCodeElement>;
            "geov-data-fetch-example": LocalJSX.GeovDataFetchExample & JSXBase.HTMLAttributes<HTMLGeovDataFetchExampleElement>;
            "geov-entity-class-label": LocalJSX.GeovEntityClassLabel & JSXBase.HTMLAttributes<HTMLGeovEntityClassLabelElement>;
            "geov-entity-definition": LocalJSX.GeovEntityDefinition & JSXBase.HTMLAttributes<HTMLGeovEntityDefinitionElement>;
            "geov-entity-label": LocalJSX.GeovEntityLabel & JSXBase.HTMLAttributes<HTMLGeovEntityLabelElement>;
            "geov-entity-list": LocalJSX.GeovEntityList & JSXBase.HTMLAttributes<HTMLGeovEntityListElement>;
            "geov-explorer": LocalJSX.GeovExplorer & JSXBase.HTMLAttributes<HTMLGeovExplorerElement>;
            "geov-paginator": LocalJSX.GeovPaginator & JSXBase.HTMLAttributes<HTMLGeovPaginatorElement>;
            "geov-toc": LocalJSX.GeovToc & JSXBase.HTMLAttributes<HTMLGeovTocElement>;
        }
    }
}
