/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GeovClassSelectItem } from "./components/geov-class-select/geov-class-select";
import { GeovClassRadioGroupEvent } from "./components/geov-class-radio-group/geov-class-radio-group";
import { ClassSelectEvent, GeovClassSelectItem as GeovClassSelectItem1 } from "./components/geov-class-select/geov-class-select";
import { GeovClassSelectPopupEvent } from "./components/geov-class-select-popup/geov-class-select-popup";
import { Languages } from "./components/geov-code/geov-code";
import { GeovDataFetchExampleData } from "./components/geov-data-fetch-example/geov-data-fetch-example";
import { SparqlBinding } from "./lib/sparqlJson";
import { DateBinding, DateData } from "./components/geov-display-time-datetimedescription/geov-display-time-datetimedescription";
import { GeovEntityListItem } from "./components/geov-entity-list/geov-entity-list";
import { Color } from "@ionic/core";
import { GeovEntityPropertiesData, PropsWithCountBindings } from "./components/geov-entity-properties/geov-entity-properties";
import { PageEvent } from "./components/geov-paginator/geov-paginator";
import { PageEvent as PageEvent1 } from "./components/geov-paginator/geov-paginator";
export namespace Components {
    interface GeovCarousel {
        /**
          * array of image URLs passed to src attribute of the <img src="">
         */
        "images": string[];
    }
    interface GeovClassRadioGroup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
    }
    interface GeovClassSelect {
        /**
          * If true, the classes are checked on init, else none is checked on init
         */
        "checkedOnInit": boolean;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
    }
    interface GeovClassSelectPopup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
    }
    interface GeovCode {
        "code": string;
        "copyButton": boolean;
        "language": Languages;
    }
    interface GeovDataFetchExample {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * Do the sparql request(s)
          * @returns a Promise with the data for this component
         */
        "fetchData": () => Promise<GeovDataFetchExampleData>;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovDisplayGeosparqlWktliteral {
        /**
          * the opengis value
         */
        "value": string;
    }
    interface GeovDisplayTimeDatetimedescription {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'iXXX'
         */
        "entityId": string;
        "fetchBeforeRender": boolean;
        /**
          * Do the sparql request(s)
          * @returns a Promise with the data for this component
         */
        "fetchData": () => Promise<DateData>;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntity {
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        "fetchBeforeRender": boolean;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityClassLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityDefinition {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
    }
    interface GeovEntityList {
        "defaultPageSize": number;
        "items"?: GeovEntityListItem[];
        "loading"?: boolean;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovEntityProperties {
        /**
          * declares an _ssrId property that is reflected as attribute
         */
        "_ssrId"?: string;
        /**
          * color Color of the properties
         */
        "color": Color;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId": string;
        "fetchBeforeRender": boolean;
        "fetchData": () => Promise<GeovEntityPropertiesData>;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language": string;
        /**
          * predicateInclude Comma separated list of predicate URI's to exclude, e.g: Don't fetch the rdfs:label and p86i (was born) 'http://www.w3.org/2000/01/rdf-schema#label,https://ontome.net/ontology/p86i'
         */
        "predicateExclude"?: string;
        /**
          * predicateInclude Comma separated list of predicate URI's to include, e.g: Fetch only the rdfs:label and p86i (was born) 'http://www.w3.org/2000/01/rdf-schema#label,https://ontome.net/ontology/p86i'
         */
        "predicateInclude"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovEntityPropsByPredicate {
        /**
          * declares an _ssrId property that is reflected as attribute
         */
        "_ssrId"?: string;
        "color": Color;
        /**
          * entityId ID number of entity, e.g. 'iXXX'
         */
        "entityId": string;
        /**
          * if true, componentWillLoad() returns a promise for the loading of all data [default: true]
         */
        "fetchBeforeRender": boolean;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language": string;
        /**
          * pageSize Page size if too many resultat for a property, default 3
         */
        "pageSize": number;
        /**
          * predicateLabel Label of the predicate
         */
        "predicateLabel"?: string;
        /**
          * predicateUri URI of the predicate
         */
        "predicateUri": string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
        /**
          * totalCount Total number of entity from this property
         */
        "totalCount": number;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovExplorer {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * If true, the component will not render before the initial data is fetched
         */
        "fetchBeforeRender": boolean;
        /**
          * initialize the component with a given search string
         */
        "initSearchString"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovIf {
        "_ssrId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint": string;
        /**
          * A sparql query with binding ?condition of type ^^xsd:bolean. If the first ?condition of response is true, the children of the element are rendered, otherwise not.  Example: ```sparql # check if geov:i836507 is annotated entity (ontome:p1875) # of an annotation in text (ontome:p1875) PREFIX ontome: <https://ontome.net/ontology/> PREFIX geov: <http://geovistory.org/resource/>  SELECT  ((count(?subject ) > 0)as ?condition) WHERE {   ?subject ontome:p1875 geov:i836507 .   ?subject a ontome:c933 } GROUP BY ?subject LIMIT 1 ```
         */
        "sparqlQuery": string;
    }
    interface GeovPaginator {
        "color": Color;
        "hidePageSize": boolean;
        "length": number;
        "pageIndex": number;
        "pageSize": number;
        "showFirstLastButtons": boolean;
    }
    interface GeovToc {
        "indentPx": number;
    }
}
export interface GeovClassRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassRadioGroupElement;
}
export interface GeovClassSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassSelectElement;
}
export interface GeovClassSelectPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovClassSelectPopupElement;
}
export interface GeovEntityPropsByPredicateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovEntityPropsByPredicateElement;
}
export interface GeovPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGeovPaginatorElement;
}
declare global {
    interface HTMLGeovCarouselElement extends Components.GeovCarousel, HTMLStencilElement {
    }
    var HTMLGeovCarouselElement: {
        prototype: HTMLGeovCarouselElement;
        new (): HTMLGeovCarouselElement;
    };
    interface HTMLGeovClassRadioGroupElement extends Components.GeovClassRadioGroup, HTMLStencilElement {
    }
    var HTMLGeovClassRadioGroupElement: {
        prototype: HTMLGeovClassRadioGroupElement;
        new (): HTMLGeovClassRadioGroupElement;
    };
    interface HTMLGeovClassSelectElement extends Components.GeovClassSelect, HTMLStencilElement {
    }
    var HTMLGeovClassSelectElement: {
        prototype: HTMLGeovClassSelectElement;
        new (): HTMLGeovClassSelectElement;
    };
    interface HTMLGeovClassSelectPopupElement extends Components.GeovClassSelectPopup, HTMLStencilElement {
    }
    var HTMLGeovClassSelectPopupElement: {
        prototype: HTMLGeovClassSelectPopupElement;
        new (): HTMLGeovClassSelectPopupElement;
    };
    interface HTMLGeovCodeElement extends Components.GeovCode, HTMLStencilElement {
    }
    var HTMLGeovCodeElement: {
        prototype: HTMLGeovCodeElement;
        new (): HTMLGeovCodeElement;
    };
    interface HTMLGeovDataFetchExampleElement extends Components.GeovDataFetchExample, HTMLStencilElement {
    }
    var HTMLGeovDataFetchExampleElement: {
        prototype: HTMLGeovDataFetchExampleElement;
        new (): HTMLGeovDataFetchExampleElement;
    };
    interface HTMLGeovDisplayGeosparqlWktliteralElement extends Components.GeovDisplayGeosparqlWktliteral, HTMLStencilElement {
    }
    var HTMLGeovDisplayGeosparqlWktliteralElement: {
        prototype: HTMLGeovDisplayGeosparqlWktliteralElement;
        new (): HTMLGeovDisplayGeosparqlWktliteralElement;
    };
    interface HTMLGeovDisplayTimeDatetimedescriptionElement extends Components.GeovDisplayTimeDatetimedescription, HTMLStencilElement {
    }
    var HTMLGeovDisplayTimeDatetimedescriptionElement: {
        prototype: HTMLGeovDisplayTimeDatetimedescriptionElement;
        new (): HTMLGeovDisplayTimeDatetimedescriptionElement;
    };
    interface HTMLGeovEntityElement extends Components.GeovEntity, HTMLStencilElement {
    }
    var HTMLGeovEntityElement: {
        prototype: HTMLGeovEntityElement;
        new (): HTMLGeovEntityElement;
    };
    interface HTMLGeovEntityClassLabelElement extends Components.GeovEntityClassLabel, HTMLStencilElement {
    }
    var HTMLGeovEntityClassLabelElement: {
        prototype: HTMLGeovEntityClassLabelElement;
        new (): HTMLGeovEntityClassLabelElement;
    };
    interface HTMLGeovEntityDefinitionElement extends Components.GeovEntityDefinition, HTMLStencilElement {
    }
    var HTMLGeovEntityDefinitionElement: {
        prototype: HTMLGeovEntityDefinitionElement;
        new (): HTMLGeovEntityDefinitionElement;
    };
    interface HTMLGeovEntityLabelElement extends Components.GeovEntityLabel, HTMLStencilElement {
    }
    var HTMLGeovEntityLabelElement: {
        prototype: HTMLGeovEntityLabelElement;
        new (): HTMLGeovEntityLabelElement;
    };
    interface HTMLGeovEntityListElement extends Components.GeovEntityList, HTMLStencilElement {
    }
    var HTMLGeovEntityListElement: {
        prototype: HTMLGeovEntityListElement;
        new (): HTMLGeovEntityListElement;
    };
    interface HTMLGeovEntityPropertiesElement extends Components.GeovEntityProperties, HTMLStencilElement {
    }
    var HTMLGeovEntityPropertiesElement: {
        prototype: HTMLGeovEntityPropertiesElement;
        new (): HTMLGeovEntityPropertiesElement;
    };
    interface HTMLGeovEntityPropsByPredicateElement extends Components.GeovEntityPropsByPredicate, HTMLStencilElement {
    }
    var HTMLGeovEntityPropsByPredicateElement: {
        prototype: HTMLGeovEntityPropsByPredicateElement;
        new (): HTMLGeovEntityPropsByPredicateElement;
    };
    interface HTMLGeovExplorerElement extends Components.GeovExplorer, HTMLStencilElement {
    }
    var HTMLGeovExplorerElement: {
        prototype: HTMLGeovExplorerElement;
        new (): HTMLGeovExplorerElement;
    };
    interface HTMLGeovIfElement extends Components.GeovIf, HTMLStencilElement {
    }
    var HTMLGeovIfElement: {
        prototype: HTMLGeovIfElement;
        new (): HTMLGeovIfElement;
    };
    interface HTMLGeovPaginatorElement extends Components.GeovPaginator, HTMLStencilElement {
    }
    var HTMLGeovPaginatorElement: {
        prototype: HTMLGeovPaginatorElement;
        new (): HTMLGeovPaginatorElement;
    };
    interface HTMLGeovTocElement extends Components.GeovToc, HTMLStencilElement {
    }
    var HTMLGeovTocElement: {
        prototype: HTMLGeovTocElement;
        new (): HTMLGeovTocElement;
    };
    interface HTMLElementTagNameMap {
        "geov-carousel": HTMLGeovCarouselElement;
        "geov-class-radio-group": HTMLGeovClassRadioGroupElement;
        "geov-class-select": HTMLGeovClassSelectElement;
        "geov-class-select-popup": HTMLGeovClassSelectPopupElement;
        "geov-code": HTMLGeovCodeElement;
        "geov-data-fetch-example": HTMLGeovDataFetchExampleElement;
        "geov-display-geosparql-wktliteral": HTMLGeovDisplayGeosparqlWktliteralElement;
        "geov-display-time-datetimedescription": HTMLGeovDisplayTimeDatetimedescriptionElement;
        "geov-entity": HTMLGeovEntityElement;
        "geov-entity-class-label": HTMLGeovEntityClassLabelElement;
        "geov-entity-definition": HTMLGeovEntityDefinitionElement;
        "geov-entity-label": HTMLGeovEntityLabelElement;
        "geov-entity-list": HTMLGeovEntityListElement;
        "geov-entity-properties": HTMLGeovEntityPropertiesElement;
        "geov-entity-props-by-predicate": HTMLGeovEntityPropsByPredicateElement;
        "geov-explorer": HTMLGeovExplorerElement;
        "geov-if": HTMLGeovIfElement;
        "geov-paginator": HTMLGeovPaginatorElement;
        "geov-toc": HTMLGeovTocElement;
    }
}
declare namespace LocalJSX {
    interface GeovCarousel {
        /**
          * array of image URLs passed to src attribute of the <img src="">
         */
        "images"?: string[];
    }
    interface GeovClassRadioGroup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
        "onSelectionChanged"?: (event: GeovClassRadioGroupCustomEvent<GeovClassRadioGroupEvent>) => void;
    }
    interface GeovClassSelect {
        /**
          * If true, the classes are checked on init, else none is checked on init
         */
        "checkedOnInit"?: boolean;
        "items"?: GeovClassSelectItem[];
        "loading"?: boolean;
        "onSelectionChanged"?: (event: GeovClassSelectCustomEvent<ClassSelectEvent>) => void;
    }
    interface GeovClassSelectPopup {
        "initValue"?: GeovClassSelectItem;
        "items"?: GeovClassSelectItem[];
        "onSelectionChanged"?: (event: GeovClassSelectPopupCustomEvent<GeovClassSelectPopupEvent>) => void;
    }
    interface GeovCode {
        "code"?: string;
        "copyButton"?: boolean;
        "language"?: Languages;
    }
    interface GeovDataFetchExample {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovDisplayGeosparqlWktliteral {
        /**
          * the opengis value
         */
        "value"?: string;
    }
    interface GeovDisplayTimeDatetimedescription {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'iXXX'
         */
        "entityId"?: string;
        "fetchBeforeRender"?: boolean;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntity {
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        "fetchBeforeRender"?: boolean;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityClassLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityDefinition {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityLabel {
        "_ssrId"?: string;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
    }
    interface GeovEntityList {
        "defaultPageSize"?: number;
        "items"?: GeovEntityListItem[];
        "loading"?: boolean;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovEntityProperties {
        /**
          * declares an _ssrId property that is reflected as attribute
         */
        "_ssrId"?: string;
        /**
          * color Color of the properties
         */
        "color"?: Color;
        /**
          * entityId ID number of entity, e.g. 'i315800'
         */
        "entityId"?: string;
        "fetchBeforeRender"?: boolean;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language"?: string;
        /**
          * predicateInclude Comma separated list of predicate URI's to exclude, e.g: Don't fetch the rdfs:label and p86i (was born) 'http://www.w3.org/2000/01/rdf-schema#label,https://ontome.net/ontology/p86i'
         */
        "predicateExclude"?: string;
        /**
          * predicateInclude Comma separated list of predicate URI's to include, e.g: Fetch only the rdfs:label and p86i (was born) 'http://www.w3.org/2000/01/rdf-schema#label,https://ontome.net/ontology/p86i'
         */
        "predicateInclude"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovEntityPropsByPredicate {
        /**
          * declares an _ssrId property that is reflected as attribute
         */
        "_ssrId"?: string;
        "color"?: Color;
        /**
          * entityId ID number of entity, e.g. 'iXXX'
         */
        "entityId"?: string;
        /**
          * if true, componentWillLoad() returns a promise for the loading of all data [default: true]
         */
        "fetchBeforeRender"?: boolean;
        /**
          * language prints the label with the language or english, if not found, e.g. 'en'
         */
        "language"?: string;
        /**
          * pageChanged Listener of change page
         */
        "onPageChanged"?: (event: GeovEntityPropsByPredicateCustomEvent<PageEvent>) => void;
        /**
          * pageSize Page size if too many resultat for a property, default 3
         */
        "pageSize"?: number;
        /**
          * predicateLabel Label of the predicate
         */
        "predicateLabel"?: string;
        /**
          * predicateUri URI of the predicate
         */
        "predicateUri"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
        /**
          * totalCount Total number of entity from this property
         */
        "totalCount"?: number;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovExplorer {
        /**
          * _ssrId is short for server side rendering id and identifies this component and the fetched data respectively. Set this only if you want to enable this component to fetch serve side
         */
        "_ssrId"?: string;
        /**
          * If true, the component will not render before the initial data is fetched
         */
        "fetchBeforeRender"?: boolean;
        /**
          * initialize the component with a given search string
         */
        "initSearchString"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
        /**
          * uriRegex Optional regex with capturing groups to transform the uri into the desired url. To use together with uriReplace.
         */
        "uriRegex"?: string;
        /**
          * uriReplace String used to replace the uriRegex.  Example (pseudo code): const uriRegex = (http:\/\/geovistory.org\/)(.*) const uriReplace = "http://dev.geovistory.org/resource/$2?p=123" http://geovistory.org/resource/i54321 => http://dev.geovistory.org/resource/54321?p=123
         */
        "uriReplace"?: string;
    }
    interface GeovIf {
        "_ssrId"?: string;
        /**
          * sparqlEndpoint URL of the sparql endpoint
         */
        "sparqlEndpoint"?: string;
        /**
          * A sparql query with binding ?condition of type ^^xsd:bolean. If the first ?condition of response is true, the children of the element are rendered, otherwise not.  Example: ```sparql # check if geov:i836507 is annotated entity (ontome:p1875) # of an annotation in text (ontome:p1875) PREFIX ontome: <https://ontome.net/ontology/> PREFIX geov: <http://geovistory.org/resource/>  SELECT  ((count(?subject ) > 0)as ?condition) WHERE {   ?subject ontome:p1875 geov:i836507 .   ?subject a ontome:c933 } GROUP BY ?subject LIMIT 1 ```
         */
        "sparqlQuery"?: string;
    }
    interface GeovPaginator {
        "color"?: Color;
        "hidePageSize"?: boolean;
        "length"?: number;
        "onPageChanged"?: (event: GeovPaginatorCustomEvent<PageEvent>) => void;
        "pageIndex"?: number;
        "pageSize"?: number;
        "showFirstLastButtons"?: boolean;
    }
    interface GeovToc {
        "indentPx"?: number;
    }
    interface IntrinsicElements {
        "geov-carousel": GeovCarousel;
        "geov-class-radio-group": GeovClassRadioGroup;
        "geov-class-select": GeovClassSelect;
        "geov-class-select-popup": GeovClassSelectPopup;
        "geov-code": GeovCode;
        "geov-data-fetch-example": GeovDataFetchExample;
        "geov-display-geosparql-wktliteral": GeovDisplayGeosparqlWktliteral;
        "geov-display-time-datetimedescription": GeovDisplayTimeDatetimedescription;
        "geov-entity": GeovEntity;
        "geov-entity-class-label": GeovEntityClassLabel;
        "geov-entity-definition": GeovEntityDefinition;
        "geov-entity-label": GeovEntityLabel;
        "geov-entity-list": GeovEntityList;
        "geov-entity-properties": GeovEntityProperties;
        "geov-entity-props-by-predicate": GeovEntityPropsByPredicate;
        "geov-explorer": GeovExplorer;
        "geov-if": GeovIf;
        "geov-paginator": GeovPaginator;
        "geov-toc": GeovToc;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "geov-carousel": LocalJSX.GeovCarousel & JSXBase.HTMLAttributes<HTMLGeovCarouselElement>;
            "geov-class-radio-group": LocalJSX.GeovClassRadioGroup & JSXBase.HTMLAttributes<HTMLGeovClassRadioGroupElement>;
            "geov-class-select": LocalJSX.GeovClassSelect & JSXBase.HTMLAttributes<HTMLGeovClassSelectElement>;
            "geov-class-select-popup": LocalJSX.GeovClassSelectPopup & JSXBase.HTMLAttributes<HTMLGeovClassSelectPopupElement>;
            "geov-code": LocalJSX.GeovCode & JSXBase.HTMLAttributes<HTMLGeovCodeElement>;
            "geov-data-fetch-example": LocalJSX.GeovDataFetchExample & JSXBase.HTMLAttributes<HTMLGeovDataFetchExampleElement>;
            "geov-display-geosparql-wktliteral": LocalJSX.GeovDisplayGeosparqlWktliteral & JSXBase.HTMLAttributes<HTMLGeovDisplayGeosparqlWktliteralElement>;
            "geov-display-time-datetimedescription": LocalJSX.GeovDisplayTimeDatetimedescription & JSXBase.HTMLAttributes<HTMLGeovDisplayTimeDatetimedescriptionElement>;
            "geov-entity": LocalJSX.GeovEntity & JSXBase.HTMLAttributes<HTMLGeovEntityElement>;
            "geov-entity-class-label": LocalJSX.GeovEntityClassLabel & JSXBase.HTMLAttributes<HTMLGeovEntityClassLabelElement>;
            "geov-entity-definition": LocalJSX.GeovEntityDefinition & JSXBase.HTMLAttributes<HTMLGeovEntityDefinitionElement>;
            "geov-entity-label": LocalJSX.GeovEntityLabel & JSXBase.HTMLAttributes<HTMLGeovEntityLabelElement>;
            "geov-entity-list": LocalJSX.GeovEntityList & JSXBase.HTMLAttributes<HTMLGeovEntityListElement>;
            "geov-entity-properties": LocalJSX.GeovEntityProperties & JSXBase.HTMLAttributes<HTMLGeovEntityPropertiesElement>;
            "geov-entity-props-by-predicate": LocalJSX.GeovEntityPropsByPredicate & JSXBase.HTMLAttributes<HTMLGeovEntityPropsByPredicateElement>;
            "geov-explorer": LocalJSX.GeovExplorer & JSXBase.HTMLAttributes<HTMLGeovExplorerElement>;
            "geov-if": LocalJSX.GeovIf & JSXBase.HTMLAttributes<HTMLGeovIfElement>;
            "geov-paginator": LocalJSX.GeovPaginator & JSXBase.HTMLAttributes<HTMLGeovPaginatorElement>;
            "geov-toc": LocalJSX.GeovToc & JSXBase.HTMLAttributes<HTMLGeovTocElement>;
        }
    }
}
